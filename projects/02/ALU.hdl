// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:
    // Preprocessing x
    Mux16(a=x, b=false, sel=zx, out=wx);
    Not16(in=wx, out=nwx);
    Mux16(a=wx, b=nwx, sel=nx, out=fx);

    // Preprocessing y
    Mux16(a=y, b=false, sel=zy, out=wy);
    Not16(in=wy, out=nwy);
    Mux16(a=wy, b=nwy, sel=ny, out=fy);

    // functions
    And16(a=fx, b=fy, out=xandy);
    Add16(a=fx, b=fy, out=xplusy);
    Mux16(a=xandy, b=xplusy, sel=f, out=result);

    // negate output
    Not16(in=result, out=nresult);
    Mux16(a=result, b=nresult, sel=no, out=fresult);
    Mux16(a=result, b=nresult, sel=no, out[0]=fr0, out[1]=fr1, 
        out[2]=fr2, out[3]=fr3, out[4]=fr4, 
        out[5]=fr5, out[6]=fr6, out[7]=fr7,
        out[8]=fr8, out[9]=fr9, out[10]=fr10,
        out[11]=fr11, out[12]=fr12, out[13]=fr13,
        out[14]=fr14, out[15]=sign);

    // ng 
    And(a=true, b=sign, out=ng);

    // zr
    Or8Way(in[0]=fr0, in[1]=fr1, in[2]=fr2, in[3]=fr3, in[4]=fr4, in[5]=fr5,
        in[6]=fr6, in[7]=fr7, out=p1);
    Or8Way(in[0]=fr8, in[1]=fr9, in[2]=fr10, in[3]=fr11, in[4]=fr12, in[5]=fr13,
        in[6]=fr14, in[7]=sign, out=p2);
    Or(a=p1, b=p2, out=nzr);

    Not(in=nzr, out=zr);

    //final out
    Add16(a=fresult, b=false, out=out);

}