// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        /**
        * instructionformat: ixxa ccc ccc ddd jjj
        * i = opcode -> use A-instruction or C-instruction
        * xx ->  these are not used in out spec  
        * a -> if set (a == 1) it will use M[A] the value in memory address A, if not it will use A (address) directly
        * cccccc -> computation to be done (will depend on 'a')
        * ddd -> destination where the output of the ALU should go 
        * jjj -> jump condition, either go to memory location in load, reset or PC++
        */

        // Circuit for the PC logic jjj are positions [13-15] in the instruction
        Not(in=ng, out=notng);
        And(a=ng, b=instruction[13], out=ngandj0);
        And(a=notng, b=instruction[15], out=notngandj2);
        Or(a=notngandj2, b=ngandj0, out=loadin1);
        And(a=zr, b=instruction[14], out=zrandj1);
        Or(a=zrandj1, b=loadin1, out=jumptoA);


        // Overall architecture -> refer figure 5.8
        Register(in=registerAin, load=instruction[10], out=Aregoutput);
        Mux16(a=Aregoutput, b=inM, sel=instruction[3], out=ALUiny); 
        Mux16(a=ALUout, b=instruction, sel=instruction[0], out=registerAin);
        Register(in=ALUout, load=instruction[11], out=ALUinx); //  D = ALUinx
        PC(in=Aregoutput, load=jumptoA, inc=true, reset=reset, out=pcout);

        // for the ALU x=D y=M/A depending on 'a'
        // for the ALU cccccc = instruction[4..9] = zx, nx, zy, ny, f, no
        ALU(
            x=ALUinx, 
            y=ALUiny, 
            zx=instruction[4], 
            nx=instruction[5], 
            zy=instruction[6], 
            ny=instruction[7], 
            f=instruction[8], 
            no=instruction[9], 
            out=ALUout, 
            zr=zr, 
            ng=ng);

        // connect outputs
        writeM = instruction[12];
        outM = ALUout;
        addressM = Aregoutput[0..14]; // needs to be 15 bit
        pc = pcout[0..14]; // needs to be 15 bit

}